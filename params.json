{
  "name": "KSpec",
  "tagline": "Kotlin Specification Framework",
  "body": "# KSpec \r\n[![Bintray](https://img.shields.io/bintray/v/raniejade/maven/kspec.svg)](https://bintray.com/raniejade/maven/kspec/_latestVersion) [![Build Status](https://travis-ci.org/raniejade/kspec.svg?branch=master)](https://travis-ci.org/raniejade/kspec) [![codecov.io](https://codecov.io/github/raniejade/kspec/coverage.svg?branch=master)](https://codecov.io/github/raniejade/kspec?branch=master)\r\n\r\nSpecifications for Kotlin.\r\n\r\n## Basic Structure\r\n```kotlin\r\nclass TheMostAmazingAnimalSpec: KSpec() {\r\n    override fun spec() {\r\n        describe(\"the most amazing animal in the universe\") {\r\n            val animal = GetMostAmazingAnimal()\r\n            it(\"should be a panda\") {\r\n                assertThat(animal.type, equalTo(\"panda\"))\r\n            }\r\n            \r\n            context(\"not a panda\") {\r\n                it(\"nope, not going to accept it\") {\r\n                    assertThat({\r\n                        assertThat(animal.type, not(equalTo(\"panda\")))\r\n                    }, thrown(EndOfTheWorldException::class))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Context\r\nKSpec is heavily inspired by [RSpec](http://rspec.info/), `Context` is synonymous to RSpec's scopes.\r\n\r\n### Example\r\nThe test method in JUnit and created using `it`.\r\n\r\n### ExampleGroup\r\nGroups similar examples together (they might be testing the same `Subject` - more on this later) and is created by using `describe` or `context`. Be cautious in placing logic code in them as they are eagerly evaluated\r\n\r\n## Fixtures\r\nKSpec provides `before`, `beforeEach`, `afterEach` and `after` callbacks for each context.\r\n\r\n## Subject\r\nJust like RSpec, KSpec also support subjects.\r\n```kotlin\r\nclass TheMostAmazingAnimalSpec: KSpec() {\r\n    override fun spec() {\r\n        describe(\"the most amazing animal in the universe\") {\r\n            subject {\r\n                return@subject GetMostAmazingAnimal();\r\n            }\r\n            \r\n            it(\"should be a panda\") {\r\n                assertThat(subject.type, equalTo(\"panda\"))\r\n            }\r\n            \r\n            context(\"not a panda\") {\r\n                it(\"nope, not going to accept it\") {\r\n                    assertThat({\r\n                        assertThat(subject.type, not(equalTo(\"panda\")))\r\n                    }, thrown(EndOfTheWorldException::class))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Shared Examples\r\nSometimes it's convenient to reuse examples - like testing a subclass.\r\n```kotlin\r\nclass CalculatorSpec: KSpec() {\r\n    override fun spec() {\r\n        describe(Calculator::class) {\r\n            itBehavesLike(calculator())\r\n        }\r\n    }\r\n    \r\n    companion object {\r\n        fun calculator() = sharedExample<Calculator> {\r\n            describe(\"add\") {\r\n                it(\"1 + 1 = 2\") {\r\n                    assertThat(subject.add(1, 1), equalTo(2))\r\n                }\r\n            }\r\n            ...\r\n        }\r\n    }\r\n}\r\n\r\nclass AdvancedCalculatorSpec: KSpec() {\r\n    override fun spec() {\r\n        describe(AdvancedCalculator::class) {\r\n            itBehavesLike(CalculatorSpec.calculator())\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Focused Examples\r\nBy using `fit` instead of `it` you can *focus* an execution on an example. KSpec will only execute focused examples if there are any, otherwise it will execute everything.\r\n\r\n## Runner\r\nCurrently only a JUnit 4 Runner is provided. Make sure to annotate your test classes with `@RunWith(JUnitKSpecRunner)`.\r\n\r\n\r\n## Usage\r\n### Gradle\r\n```gradle\r\nrepositories {\r\n    jcenter()\r\n}\r\n\r\ndependencies {\r\n    testCompile \"io.polymorphicpanda.kspec:kspec-core:<kspec-version>\"\r\n    testCompile \"io.polymorphicpanda.kspec:kspec-junit-runner:<kspec-version>\"\r\n}\r\n```\r\n\r\nSnapshot versions are available at http://oss.jfrog.org/artifactory/oss-snapshot-local/\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}